# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kmeans_pb2 as kmeans__pb2


class MapperStub(object):
    """Mapper service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GivereducerInput = channel.unary_unary(
                '/Mapper/GivereducerInput',
                request_serializer=kmeans__pb2.ReducerInputRequest.SerializeToString,
                response_deserializer=kmeans__pb2.ReducerOutput.FromString,
                )
        self.call_mapper = channel.unary_unary(
                '/Mapper/call_mapper',
                request_serializer=kmeans__pb2.InputSplitRequest.SerializeToString,
                response_deserializer=kmeans__pb2.mapreturn.FromString,
                )


class MapperServicer(object):
    """Mapper service
    """

    def GivereducerInput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def call_mapper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GivereducerInput': grpc.unary_unary_rpc_method_handler(
                    servicer.GivereducerInput,
                    request_deserializer=kmeans__pb2.ReducerInputRequest.FromString,
                    response_serializer=kmeans__pb2.ReducerOutput.SerializeToString,
            ),
            'call_mapper': grpc.unary_unary_rpc_method_handler(
                    servicer.call_mapper,
                    request_deserializer=kmeans__pb2.InputSplitRequest.FromString,
                    response_serializer=kmeans__pb2.mapreturn.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mapper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mapper(object):
    """Mapper service
    """

    @staticmethod
    def GivereducerInput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mapper/GivereducerInput',
            kmeans__pb2.ReducerInputRequest.SerializeToString,
            kmeans__pb2.ReducerOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def call_mapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mapper/call_mapper',
            kmeans__pb2.InputSplitRequest.SerializeToString,
            kmeans__pb2.mapreturn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerStub(object):
    """Reducer service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.call_reducer = channel.unary_unary(
                '/Reducer/call_reducer',
                request_serializer=kmeans__pb2.reducerinput.SerializeToString,
                response_deserializer=kmeans__pb2.Reducereturn.FromString,
                )


class ReducerServicer(object):
    """Reducer service
    """

    def call_reducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'call_reducer': grpc.unary_unary_rpc_method_handler(
                    servicer.call_reducer,
                    request_deserializer=kmeans__pb2.reducerinput.FromString,
                    response_serializer=kmeans__pb2.Reducereturn.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Reducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reducer(object):
    """Reducer service
    """

    @staticmethod
    def call_reducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Reducer/call_reducer',
            kmeans__pb2.reducerinput.SerializeToString,
            kmeans__pb2.Reducereturn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
