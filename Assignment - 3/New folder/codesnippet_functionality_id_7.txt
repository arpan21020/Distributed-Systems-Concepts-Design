# partition within mapper
def partition(self, num_reducers, map_out,append_flg):
        partitions = [[] for _ in range(num_reducers)]
        # print("Map_out: ",map_out,"---------------------------------------")
        for dict in map_out:
            # print("Dict: ",dict.items())
            for key, value in dict.items():
                partition_index = key % num_reducers
                # print("Partition Index: ",partition_index)
                # print("Key: ",key)
                # print('Value: ',value)
                # print("no of reducers: ",num_reducers)
                # print()
                partitions[partition_index].append((key, value))
        # for partition in partitions:
        #     print(partition)
        for i, partition in enumerate(partitions):
            if append_flg==False:
                print("Removing previous partition file")
                with open(
                    f"Data/Mappers/M{self.MapperID+1}/partition_{i+1}.txt", "w"
                ) as file:
                    for key, value in partition:
                        file.write(f"{key},{value[0]},{value[1]}\n")
            else:
                print("Appending to previous partition file")
                with open(
                    f"Data/Mappers/M{self.MapperID+1}/partition_{i+1}.txt", "a"
                ) as file:
                    for key, value in partition:
                        file.write(f"{key},{value[0]},{value[1]}\n")
            # with open(
            #     f"M{self.MapperID+1}_partition_{i+1}.txt", "a"
            # ) as file:
            #     for key, value in partition:
            #         file.write(f"{key},{value[0]},{value[1]}\n")
            # with open(
            #     f"M{self.MapperID+1}_partition_{i+1}.txt", "a"
            # ) as file:
            #     file.write("-------------------------------------------\n")
        # done